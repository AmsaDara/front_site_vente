import { Component, Input, ElementRef, EventEmitter, Output } from '@angular/core';
import { CloudinaryVideo } from '@cloudinary/url-gen';
import { cancelCurrentlyRunningPlugins, HtmlVideoLayer } from '@cloudinary/html';
/**
 * @memberOf AngularSDK
 * @type {Component}
 * @description The Cloudinary video component.
 * @prop {CloudinaryVideo} transformation Generated by @cloudinary/url-gen
 * @prop {Plugins} plugins Advanced image component plugins lazyload()
 * @prop videoAttributes Optional attributes include controls, loop, muted, poster, preload, autoplay
 * @prop videoEvents Optional video events include play, loadstart, playing, error, ended
 * @prop {VideoSources} sources Optional sources to generate
 * @example
 *  <caption>
 *  Using custom defined resources.
 * </caption>
 *   vid = new CloudinaryVideo('dog', {cloudName: 'demo'});
 *   sources = [
 {
        type: 'mp4',
        codecs: ['vp8', 'vorbis'],
        transcode: videoCodec(auto())
},
 {
        type: 'webm',
        codecs: ['avc1.4D401E', 'mp4a.40.2'],
         transcode: videoCodec(auto())
      }];
 *
 * <advanced-video [cldvid]="vid" [sources]="sources" controls></advanced-video>
 */
export class CloudinaryVideoComponent {
    constructor(el) {
        this.el = el;
        // Event emitters
        this.play = new EventEmitter();
        this.loadstart = new EventEmitter();
        this.playing = new EventEmitter();
        this.error = new EventEmitter();
        this.ended = new EventEmitter();
        // supported video attributes
        this.controls = this.el.nativeElement.attributes.controls;
        this.loop = this.el.nativeElement.attributes.loop;
        this.muted = this.el.nativeElement.attributes.muted;
        this.preload = this.el.nativeElement.attributes.preload;
        this.autoPlay = this.el.nativeElement.attributes.autoplay;
        this.playsInline = this.el.nativeElement.attributes.playsInline;
    }
    /**
     * On init creates a new HTMLVideoLayer instance and initializes with ref to video element,
     * user generated cloudinaryVideo and the plugins to be used.
     */
    ngOnInit() {
        this.htmlVideoLayerInstance = new HtmlVideoLayer(this.el.nativeElement.children[0], this.cldVid, this.sources, this.plugins, this.getVideoAttributes());
        // check if video should be muted. We need to take care of this here since Angular has a bug with binding the muted
        // attribute
        if (this.muted) {
            this.el.nativeElement.children[0].muted = true;
        }
        // attach ref to innerRef input
        this.attachRef();
    }
    /**
     * On update, we cancel running plugins and update the video instance if the src
     * was changed.
     */
    ngOnChanges() {
        if (this.htmlVideoLayerInstance) {
            cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);
            this.htmlVideoLayerInstance.update(this.cldVid, this.sources, this.plugins, this.getVideoAttributes());
        }
    }
    /**
     * On destroy, we cancel the currently running plugins.
     */
    ngOnDestroy() {
        // Safely cancel running events on destroy
        cancelCurrentlyRunningPlugins(this.htmlVideoLayerInstance.htmlPluginState);
    }
    /**
     * Returns video attributes.
     */
    getVideoAttributes() {
        return {
            controls: this.controls,
            loop: this.loop,
            muted: this.muted,
            poster: this.poster,
            preload: this.preload,
            autoplay: this.autoPlay,
            playsinline: this.playsInline
        };
    }
    emitPlayEvent() {
        this.play.emit();
    }
    emitLoadstartEvent() {
        this.loadstart.emit();
    }
    emitPlayingEvent() {
        this.playing.emit();
    }
    emitErrorEvent() {
        this.error.emit();
    }
    emitEndedEvent() {
        this.ended.emit();
    }
    /**
     * Attach both this.videoRef and props.innerRef as ref to the given element.
     */
    attachRef() {
        if (this.innerRef) {
            this.innerRef.nativeElement = this.el.nativeElement.children[0];
        }
    }
}
CloudinaryVideoComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line:component-selector
                selector: 'advanced-video',
                template: `<video (play)="emitPlayEvent()"
                    (loadstart)="emitLoadstartEvent()"
                    (playing)="emitPlayingEvent()"
                    (error)="emitErrorEvent"
                    (ended)="emitEndedEvent">
            </video>`
            },] }
];
CloudinaryVideoComponent.ctorParameters = () => [
    { type: ElementRef }
];
CloudinaryVideoComponent.propDecorators = {
    cldVid: [{ type: Input, args: ['cldVid',] }],
    sources: [{ type: Input, args: ['sources',] }],
    plugins: [{ type: Input, args: ['plugins',] }],
    poster: [{ type: Input, args: ['poster',] }],
    innerRef: [{ type: Input, args: ['innerRef',] }],
    play: [{ type: Output }],
    loadstart: [{ type: Output }],
    playing: [{ type: Output }],
    error: [{ type: Output }],
    ended: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvdWRpbmFyeS12aWRlby5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvdWJ1bnR1L3dvcmtzcGFjZS9zZGsvc2RrLXJlbGVhc2Uvc2RrL3BhY2thZ2VzL2FuZ3VsYXIvcHJvamVjdHMvY2xvdWRpbmFyeS1saWJyYXJ5L3NyYy8iLCJzb3VyY2VzIjpbImxpYi9jbG91ZGluYXJ5LXZpZGVvLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFVLEtBQUssRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBdUIsTUFBTSxlQUFlLENBQUM7QUFDL0csT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFDTCw2QkFBNkIsRUFDN0IsY0FBYyxFQUdmLE1BQU0sa0JBQWtCLENBQUM7QUFHMUI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTJCRztBQVdILE1BQU0sT0FBTyx3QkFBd0I7SUFDbkMsWUFBb0IsRUFBYztRQUFkLE9BQUUsR0FBRixFQUFFLENBQVk7UUFRbEMsaUJBQWlCO1FBQ1AsU0FBSSxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdDLGNBQVMsR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsRCxZQUFPLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQsVUFBSyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlDLFVBQUssR0FBc0IsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUV4RCw2QkFBNkI7UUFDN0IsYUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUM7UUFDckQsU0FBSSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDN0MsVUFBSyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFD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RUFBRTs7Ozs7cUJBS1M7YUFDcEI7OztZQS9DaUMsVUFBVTs7O3FCQW1EekMsS0FBSyxTQUFDLFFBQVE7c0JBQ2QsS0FBSyxTQUFDLFNBQVM7c0JBQ2YsS0FBSyxTQUFDLFNBQVM7cUJBQ2YsS0FBSyxTQUFDLFFBQVE7dUJBQ2QsS0FBSyxTQUFDLFVBQVU7bUJBR2hCLE1BQU07d0JBQ04sTUFBTTtzQkFDTixNQUFNO29CQUNOLE1BQU07b0JBQ04sTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBPbkluaXQsIElucHV0LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIE91dHB1dCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3l9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDbG91ZGluYXJ5VmlkZW99IGZyb20gJ0BjbG91ZGluYXJ5L3VybC1nZW4nO1xuaW1wb3J0IHtcbiAgY2FuY2VsQ3VycmVudGx5UnVubmluZ1BsdWdpbnMsXG4gIEh0bWxWaWRlb0xheWVyLFxuICBQbHVnaW5zLFxuICBWaWRlb1NvdXJjZXNcbn0gZnJvbSAnQGNsb3VkaW5hcnkvaHRtbCc7XG5cblxuLyoqXG4gKiBAbWVtYmVyT2YgQW5ndWxhclNES1xuICogQHR5cGUge0NvbXBvbmVudH1cbiAqIEBkZXNjcmlwdGlvbiBUaGUgQ2xvdWRpbmFyeSB2aWRlbyBjb21wb25lbnQuXG4gKiBAcHJvcCB7Q2xvdWRpbmFyeVZpZGVvfSB0cmFuc2Zvcm1hdGlvbiBHZW5lcmF0ZWQgYnkgQGNsb3VkaW5hcnkvdXJsLWdlblxuICogQHByb3Age1BsdWdpbnN9IHBsdWdpbnMgQWR2YW5jZWQgaW1hZ2UgY29tcG9uZW50IHBsdWdpbnMgbGF6eWxvYWQoKVxuICogQHByb3AgdmlkZW9BdHRyaWJ1dGVzIE9wdGlvbmFsIGF0dHJpYnV0ZXMgaW5jbHVkZSBjb250cm9scywgbG9vcCwgbXV0ZWQsIHBvc3RlciwgcHJlbG9hZCwgYXV0b3BsYXlcbiAqIEBwcm9wIHZpZGVvRXZlbnRzIE9wdGlvbmFsIHZpZGVvIGV2ZW50cyBpbmNsdWRlIHBsYXksIGxvYWRzdGFydCwgcGxheWluZywgZXJyb3IsIGVuZGVkXG4gKiBAcHJvcCB7VmlkZW9Tb3VyY2VzfSBzb3VyY2VzIE9wdGlvbmFsIHNvdXJjZXMgdG8gZ2VuZXJhdGVcbiAqIEBleGFtcGxlXG4gKiAgPGNhcHRpb24+XG4gKiAgVXNpbmcgY3VzdG9tIGRlZmluZWQgcmVzb3VyY2VzLlxuICogPC9jYXB0aW9uPlxuICogICB2aWQgPSBuZXcgQ2xvdWRpbmFyeVZpZGVvKCdkb2cnLCB7Y2xvdWROYW1lOiAnZGVtbyd9KTtcbiAqICAgc291cmNlcyA9IFtcbiB7XG4gICAgICAgIHR5cGU6ICdtcDQnLFxuICAgICAgICBjb2RlY3M6IFsndnA4JywgJ3ZvcmJpcyddLFxuICAgICAgICB0cmFuc2NvZGU6IHZpZGVvQ29kZWMoYXV0bygpKVxufSxcbiB7XG4gICAgICAgIHR5cGU6ICd3ZWJtJyxcbiAgICAgICAgY29kZWNzOiBbJ2F2YzEuNEQ0MDFFJywgJ21wNGEuNDAuMiddLFxuICAgICAgICAgdHJhbnNjb2RlOiB2aWRlb0NvZGVjKGF1dG8oKSlcbiAgICAgIH1dO1xuICpcbiAqIDxhZHZhbmNlZC12aWRlbyBbY2xkdmlkXT1cInZpZFwiIFtzb3VyY2VzXT1cInNvdXJjZXNcIiBjb250cm9scz48L2FkdmFuY2VkLXZpZGVvPlxuICovXG5AQ29tcG9uZW50KHtcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmNvbXBvbmVudC1zZWxlY3RvclxuICBzZWxlY3RvcjogJ2FkdmFuY2VkLXZpZGVvJyxcbiAgdGVtcGxhdGU6IGA8dmlkZW8gKHBsYXkpPVwiZW1pdFBsYXlFdmVudCgpXCJcbiAgICAgICAgICAgICAgICAgICAgKGxvYWRzdGFydCk9XCJlbWl0TG9hZHN0YXJ0RXZlbnQoKVwiXG4gICAgICAgICAgICAgICAgICAgIChwbGF5aW5nKT1cImVtaXRQbGF5aW5nRXZlbnQoKVwiXG4gICAgICAgICAgICAgICAgICAgIChlcnJvcik9XCJlbWl0RXJyb3JFdmVudFwiXG4gICAgICAgICAgICAgICAgICAgIChlbmRlZCk9XCJlbWl0RW5kZWRFdmVudFwiPlxuICAgICAgICAgICAgPC92aWRlbz5gLFxufSlcbmV4cG9ydCBjbGFzcyBDbG91ZGluYXJ5VmlkZW9Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XG5cbiAgQElucHV0KCdjbGRWaWQnKSBjbGRWaWQ6IENsb3VkaW5hcnlWaWRlbztcbiAgQElucHV0KCdzb3VyY2VzJykgc291cmNlczogVmlkZW9Tb3VyY2VzO1xuICBASW5wdXQoJ3BsdWdpbnMnKSBwbHVnaW5zOiBQbHVnaW5zO1xuICBASW5wdXQoJ3Bvc3RlcicpIHBvc3Rlcjogc3RyaW5nO1xuICBASW5wdXQoJ2lubmVyUmVmJykgaW5uZXJSZWY6IEVsZW1lbnRSZWY7XG5cbiAgLy8gRXZlbnQgZW1pdHRlcnNcbiAgQE91dHB1dCgpIHBsYXk6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgbG9hZHN0YXJ0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgQE91dHB1dCgpIHBsYXlpbmc6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZXJyb3I6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICBAT3V0cHV0KCkgZW5kZWQ6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIC8vIHN1cHBvcnRlZCB2aWRlbyBhdHRyaWJ1dGVzXG4gIGNvbnRyb2xzID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmF0dHJpYnV0ZXMuY29udHJvbHM7XG4gIGxvb3AgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlcy5sb29wO1xuICBtdXRlZCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5hdHRyaWJ1dGVzLm11dGVkO1xuICBwcmVsb2FkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmF0dHJpYnV0ZXMucHJlbG9hZDtcbiAgYXV0b1BsYXkgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlcy5hdXRvcGxheTtcbiAgcGxheXNJbmxpbmUgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuYXR0cmlidXRlcy5wbGF5c0lubGluZTtcblxuICBwcml2YXRlIGh0bWxWaWRlb0xheWVySW5zdGFuY2U6IEh0bWxWaWRlb0xheWVyO1xuXG4gIC8qKlxuICAgKiBPbiBpbml0IGNyZWF0ZXMgYSBuZXcgSFRNTFZpZGVvTGF5ZXIgaW5zdGFuY2UgYW5kIGluaXRpYWxpemVzIHdpdGggcmVmIHRvIHZpZGVvIGVsZW1lbnQsXG4gICAqIHVzZXIgZ2VuZXJhdGVkIGNsb3VkaW5hcnlWaWRlbyBhbmQgdGhlIHBsdWdpbnMgdG8gYmUgdXNlZC5cbiAgICovXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaHRtbFZpZGVvTGF5ZXJJbnN0YW5jZSA9IG5ldyBIdG1sVmlkZW9MYXllcihcbiAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXSxcbiAgICAgIHRoaXMuY2xkVmlkLFxuICAgICAgdGhpcy5zb3VyY2VzLFxuICAgICAgdGhpcy5wbHVnaW5zLFxuICAgICAgdGhpcy5nZXRWaWRlb0F0dHJpYnV0ZXMoKVxuICAgICAgKTtcblxuICAgIC8vIGNoZWNrIGlmIHZpZGVvIHNob3VsZCBiZSBtdXRlZC4gV2UgbmVlZCB0byB0YWtlIGNhcmUgb2YgdGhpcyBoZXJlIHNpbmNlIEFuZ3VsYXIgaGFzIGEgYnVnIHdpdGggYmluZGluZyB0aGUgbXV0ZWRcbiAgICAvLyBhdHRyaWJ1dGVcbiAgICBpZiAodGhpcy5tdXRlZCkge1xuICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuWzBdLm11dGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBhdHRhY2ggcmVmIHRvIGlubmVyUmVmIGlucHV0XG4gICAgdGhpcy5hdHRhY2hSZWYoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPbiB1cGRhdGUsIHdlIGNhbmNlbCBydW5uaW5nIHBsdWdpbnMgYW5kIHVwZGF0ZSB0aGUgdmlkZW8gaW5zdGFuY2UgaWYgdGhlIHNyY1xuICAgKiB3YXMgY2hhbmdlZC5cbiAgICovXG4gIG5nT25DaGFuZ2VzKCkge1xuICAgIGlmICh0aGlzLmh0bWxWaWRlb0xheWVySW5zdGFuY2UpIHtcbiAgICAgIGNhbmNlbEN1cnJlbnRseVJ1bm5pbmdQbHVnaW5zKHRoaXMuaHRtbFZpZGVvTGF5ZXJJbnN0YW5jZS5odG1sUGx1Z2luU3RhdGUpO1xuICAgICAgdGhpcy5odG1sVmlkZW9MYXllckluc3RhbmNlLnVwZGF0ZSh0aGlzLmNsZFZpZCwgdGhpcy5zb3VyY2VzLCB0aGlzLnBsdWdpbnMsIHRoaXMuZ2V0VmlkZW9BdHRyaWJ1dGVzKCkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPbiBkZXN0cm95LCB3ZSBjYW5jZWwgdGhlIGN1cnJlbnRseSBydW5uaW5nIHBsdWdpbnMuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBTYWZlbHkgY2FuY2VsIHJ1bm5pbmcgZXZlbnRzIG9uIGRlc3Ryb3lcbiAgICBjYW5jZWxDdXJyZW50bHlSdW5uaW5nUGx1Z2lucyh0aGlzLmh0bWxWaWRlb0xheWVySW5zdGFuY2UuaHRtbFBsdWdpblN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHZpZGVvIGF0dHJpYnV0ZXMuXG4gICAqL1xuICBnZXRWaWRlb0F0dHJpYnV0ZXMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRyb2xzOiB0aGlzLmNvbnRyb2xzLFxuICAgICAgbG9vcDogdGhpcy5sb29wLFxuICAgICAgbXV0ZWQ6IHRoaXMubXV0ZWQsXG4gICAgICBwb3N0ZXI6IHRoaXMucG9zdGVyLFxuICAgICAgcHJlbG9hZDogdGhpcy5wcmVsb2FkLFxuICAgICAgYXV0b3BsYXk6IHRoaXMuYXV0b1BsYXksXG4gICAgICBwbGF5c2lubGluZTogdGhpcy5wbGF5c0lubGluZVxuICAgIH07XG4gIH1cblxuICBlbWl0UGxheUV2ZW50KCkge1xuICAgIHRoaXMucGxheS5lbWl0KCk7XG4gIH1cblxuICBlbWl0TG9hZHN0YXJ0RXZlbnQoKSB7XG4gICAgdGhpcy5sb2Fkc3RhcnQuZW1pdCgpO1xuICB9XG5cbiAgZW1pdFBsYXlpbmdFdmVudCgpIHtcbiAgICB0aGlzLnBsYXlpbmcuZW1pdCgpO1xuICB9XG5cbiAgZW1pdEVycm9yRXZlbnQoKSB7XG4gICAgdGhpcy5lcnJvci5lbWl0KCk7XG4gIH1cblxuICBlbWl0RW5kZWRFdmVudCgpIHtcbiAgICB0aGlzLmVuZGVkLmVtaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRhY2ggYm90aCB0aGlzLnZpZGVvUmVmIGFuZCBwcm9wcy5pbm5lclJlZiBhcyByZWYgdG8gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAqL1xuICBhdHRhY2hSZWYoKSB7XG4gICAgaWYgKHRoaXMuaW5uZXJSZWYpIHtcbiAgICAgIHRoaXMuaW5uZXJSZWYubmF0aXZlRWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5jaGlsZHJlblswXTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==